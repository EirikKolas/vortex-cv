#!/usr/bin/env python

# rosrun rqt_gui rqt_gui -s reconfigure

PACKAGE = "gate_detection"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

group_canny = gen.add_group("Canny")
group_canny.add("canny_threshold1",       int_t,  0,  "threshold 1 for the hypertesis",   100,    0,  1000)
group_canny.add("canny_threshold2",       int_t,  0,  "threshold 2 for the hypertesis",   200,    0,  1000)
canny_aperture_size_enum = gen.enum([ gen.const("Small",      int_t, 3, "A small constant"),
                       gen.const("Medium",     int_t, 5, "A medium constant"),
                       gen.const("Large",      int_t, 7, "A large constant")],
                     "An enum to set sobel procedure aperture size")
group_canny.add("canny_aperture_size", int_t, 3, "A size parameter which is edited via an enum", 3, 3, 7, edit_method=canny_aperture_size_enum)

group_hsv = gen.add_group("HSV")
group_hsv.add("hsv_hue_min",       int_t,  0,  "PLACEHOLDER",   179,    0,  179)
group_hsv.add("hsv_hue_max",       int_t,  0,  "PLACEHOLDER",   0,    0,  179)
group_hsv.add("hsv_sat_min",       int_t,  0,  "PLACEHOLDER",   255,    0,  255)
group_hsv.add("hsv_sat_max",       int_t,  0,  "PLACEHOLDER",   0,    0,  255)
group_hsv.add("hsv_val_min",       int_t,  0,  "PLACEHOLDER",   255,    0,  255)
group_hsv.add("hsv_val_max",       int_t,  0,  "PLACEHOLDER",   0,    0,  255)

group_blur = gen.add_group("Blur")
group_blur.add("ksize1", int_t,  0,  "PLACEHOLDER", 7, 0, 20)
group_blur.add("ksize2", int_t,  0,  "PLACEHOLDER", 7, 0, 20)
group_blur.add("sigma", double_t,  0,  "PLACEHOLDER", .8, 0, 10)

group_thresholding = gen.add_group("Thresholding")
group_thresholding.add("blocksize", int_t,  0,  "PLACEHOLDER", 11, 0, 50)
group_thresholding.add("C", int_t,  0,  "PLACEHOLDER", 2, -10, 30)

group_thresholding = gen.add_group("Erosion&Dilation")
group_thresholding.add("ed_ksize", int_t,  0,  "PLACEHOLDER", 11, 0, 50)
group_thresholding.add("erosion_iterations", int_t,  0,  "PLACEHOLDER", 1, 0, 30)
group_thresholding.add("dilation_iterations", int_t,  0,  "PLACEHOLDER", 1, 0, 30)

exit(gen.generate(PACKAGE, "gate_detection_cfg", "GateDetection"))